 
#Importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# 1. Load the data (replace with your actual data)
# Let's assume you have a CSV file named "market_sales_data.csv"
# The CSV should have columns like: 'Price', 'Advertising_Budget', 'Seasonality', 'Sales'

# Sample data (replace with your actual data loading code)
data = {
    'Price': [10, 12, 14, 13, 15, 16, 18, 20, 21, 22],
    'Advertising_Budget': [1000, 1100, 1050, 1200, 1250, 1300, 1500, 1600, 1700, 1800],
    'Seasonality': [1, 0.8, 1.2, 1, 1.1, 0.9, 1, 1.2, 1.3, 1.4],
    'Sales': [5000, 5500, 5800, 5600, 6000, 6300, 6500, 7000, 7100, 7500]
}

df = pd.DataFrame(data)

# 2. Preprocess the data (split features and target variable)
X = df[['Price', 'Advertising_Budget', 'Seasonality']]  # Features
y = df['Sales']  # Target variable (sales)

# 3. Split the data into training and test sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Train the 
# linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# 5. Predict on the test data
y_pred = model.predict(X_test)

# 6. Evaluate the model (Mean Squared Error, R-squared)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# 7. Visualizing the actual vs predicted sales
plt.scatter(y_test, y_pred)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')  # Line for perfect prediction
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs Predicted Sales')
plt.show()

# 8. Making future predictions (example)
future_data = pd.DataFrame({
    'Price': [23, 24],
    'Advertising_Budget': [1900, 2000],
    'Seasonality': [1.4, 1.5]
})

future_sales = model.predict(future_data)
print("Predicted Future Sales: ", future_sales)

